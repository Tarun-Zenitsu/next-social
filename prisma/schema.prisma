// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id
  username String @unique
  avatar String?
  cover String?
  name String?
  surname String?
  description String?
  city String?
  school String?
  work String?
  website String?
  createdAt DateTime @default(now())
  posts Post[]
  likes Like[]
  comments Comment[]
  followers Follower[] @relation("UserFollowers")
  followings Follower[] @relation("UserFollowings") // Corrected relation name
  followRequestsSent FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  blocks Block[] @relation("BlocksSent")
  blockedBy Block[] @relation("BlocksReceived")
  stories Story[]
}

model Post {
  id Int @id @default(autoincrement())
  desc String
  img String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  likes Like[]
  comments Comment[]
}

model Comment {
  id Int @id @default(autoincrement())
  desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  likes Like[]
}

model Like {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int? // Made this field optional
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int? // Made this field optional
}

model Follower {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  follower User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  following User @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade) // Corrected relation name
  followingId String

  @@unique([followerId, followingId]) // Added unique constraint to avoid duplicate follower-following pairs
}

model FollowRequest {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  sender User @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String
  recever User @relation("FollowRequestsReceived", fields: [receverId], references: [id], onDelete: Cascade)
  receverId String

  @@unique([senderId, receverId]) // Ensures a user can only send one follow request to another user
}

model Block {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker User @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked User @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId]) // Ensures a user can only block another user once
}

model Story {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  img String
}
